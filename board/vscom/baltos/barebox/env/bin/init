#!/bin/sh

global autoboot_timeout
[ -z "${global.autoboot_timeout}" ] && global.autoboot_timeout=1


timeout -a $global.autoboot_timeout -v key
autoboot="$?"

if [ "${key}" = "q" ]; then
	exit
fi

# init USB subsystem
usb

# turn mPCIe on
gpio_direction_output 100 1

# export MTD partition table
global of_partition_binding="legacy"

# check if USB drive is available
if [ -e /dev/disk0.0 ]; then
	mount /dev/disk0.0
	if [ -e /mnt/disk0.0/kernel-fit.itb ]; then
		echo "Booting from USB (disk0.0)"
		global linux.bootargs.base="root=/dev/sda2 rootwait"
		bootm /mnt/disk0.0/kernel-fit.itb@conf$global.board.id@1
		if [ $? -ne 0 ]; then
			bootm /mnt/disk0.0/kernel-fit.itb
		fi
	fi
fi

# check if USB (second partition) is available
if [ -e /dev/disk0.1 ]; then
	mount /dev/disk0.1
	if [ -e /mnt/disk0.1/boot/kernel-fit.itb ]; then
		echo "Booting from USB (disk0.1)"
		global linux.bootargs.base="root=/dev/sda2 rootwait"
		bootm /mnt/disk0.1/boot/kernel-fit.itb@conf$global.board.id@1
		if [ $? -ne 0 ]; then
			bootm /mnt/disk0.1/boot/kernel-fit.itb
		fi
	fi
fi

# check if MMC is available
if [ -e /dev/mmc0.0 ]; then
	mount /dev/mmc0.0
	if [ -e /mnt/mmc0.0/kernel-fit.itb ]; then
		echo "Booting from MMC (mmc0.0)"
		global linux.bootargs.base="root=/dev/mmcblk0p2 rootwait"
		bootm /mnt/mmc0.0/kernel-fit.itb@conf$global.board.id@1
		if [ $? -ne 0 ]; then
			bootm /mnt/mmc0.0/kernel-fit.itb
		fi
	fi
fi

# check if MMC (second partition) is available
if [ -e /dev/mmc0.1 ]; then
	mount /dev/mmc0.1
	if [ -e /mnt/mmc0.1/boot/kernel-fit.itb ]; then
		echo "Booting from MMC (mmc0.1)"
		global linux.bootargs.base="root=/dev/mmcblk0p2 rootwait"
		bootm /mnt/mmc0.1/boot/kernel-fit.itb@conf$global.board.id@1
		if [ $? -ne 0 ]; then
			bootm /mnt/mmc0.1/boot/kernel-fit.itb
		fi
	fi
fi

# boot from NAND
echo "Booting from NAND"
ubiattach /dev/nand0.UBI
if [ -e /dev/nand0.UBI.ubi.kernel ]; then
	mount_dev=/dev/nand0.UBI.ubi.kernel
	fit_img_path=/mnt/nand0.UBI.ubi.kernel/kernel-fit.itb
	global linux.bootargs.base="root=ubi0:rootfs rw ubi.mtd=5 rootfstype=ubifs rootwait"
else
	mount_dev=/dev/nand0.UBI.ubi.rootfs
	fit_img_path=/mnt/nand0.UBI.ubi.rootfs/boot/kernel-fit.itb
	global linux.bootargs.base="ubi.mtd=5 ubi.block=0,0 root=/dev/ubiblock0_0 rootfstype=squashfs rootwait"
fi
mount $mount_dev
bootm $fit_img_path@conf$global.board.id@1
if [ $? -ne 0 ]; then
	bootm $fit_img_path
fi
